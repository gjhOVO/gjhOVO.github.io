<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>5G基础概念</title>
    <link href="/2024/09/17/5G%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
    <url>/2024/09/17/5G%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="MCG与SCG"><a href="#MCG与SCG" class="headerlink" title="MCG与SCG"></a>MCG与SCG</h1><p>MCG主小区组，SCG辅小区组，是双链接下的概念，如果没有双链接，那就只有一个MCG。</p><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240917184431.png" alt="20240917184431"></p><p>PCell：MCG下发起初始接入的小区<br>SCell：辅小区，通过CA跟PCell联合在一起<br>PSCell：SCG下初始接入的小区</p><p>很多信令只在PCell和PSCell上发送，因此协议定义了：</p><p>sPcell &#x3D; PCell+PSCell (Special Cell)</p><h1 id="NR中各种ID"><a href="#NR中各种ID" class="headerlink" title="NR中各种ID"></a>NR中各种ID</h1><p><strong>NCGI(NR CELL Global Identifier)</strong>:全球标识一个 NR 小区的号码</p><p><strong>NCGI&#x3D;PLMN+NCI</strong></p><p><strong>PLMN(Public Land Mobile Network):</strong><br>国家码 MCC（Mobile Country Code）+网络码 MNC(Mobile NetWork Code)，此号码唯一标识了某一个国家的某一个运营商</p><p><strong>NCI(NR CELL ID)</strong>:标识 NR 中的一个 CELL</p><p><strong>NCI&#x3D;GNBID+CI</strong></p><p><strong>GNBID</strong>：唯一标识一个基站的 ID，此 ID 在一个 PLMN 内唯一</p><p><strong>CI(CELL ID)</strong>:标识一个小区，此 ID 为 3GPP 协议规定的 ID</p><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240916212613.png" alt="20240916212613"></p><p>PS：<strong>CELLID</strong>是针对基站侧来说，对应于UE侧<strong>CELLID</strong>实际上就是<strong>PCI</strong>(物理小区ID)，这也是用户接入时需要用到的信息——PCI，实际上<strong>PCI</strong>和<strong>CELLID</strong>指的是同一片空间的某一段频段，只是解读的角度不同。</p><p><strong>PCI</strong>共有1008个，如协议中规定：</p><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240916212657.png" alt="20240916212657"></p>]]></content>
    
    
    <categories>
      
      <category>5G</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>BWP</title>
    <link href="/2024/09/17/BWP/"/>
    <url>/2024/09/17/BWP/</url>
    
    <content type="html"><![CDATA[<h1 id="BWP"><a href="#BWP" class="headerlink" title="BWP"></a>BWP</h1><p>由于NR的信道带宽非常大，为了终端节能，NR种引入了BWP(BandWidth Part)的概念，BWP内的物理资源称为PRB，DL和UL最多同时配置4个BWP，但是同一时间只能有一个处于激活状态(但是也不可能所有BWP都处于非激活态)PDSCH,PDCCH,CSI-RS,PUSCH,PUCCH都必须要在激活的BWP内进行发送。对于FDD，上行BWP和下行BWP需要分别配置，对于TDD来说，上下行的BWP成对配置，上下行的BWP的中心频率必须相同，带宽可以不一样。</p><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240917170904.png" alt="20240917170904"></p><p>BWP有几种分类，InitialBWP，FirstActiveBWP，DefaultBWP和RegularBWP几种。</p><h2 id="Initial-DL-UL-BWP"><a href="#Initial-DL-UL-BWP" class="headerlink" title="Initial DL&#x2F;UL BWP"></a>Initial DL&#x2F;UL BWP</h2><p>这种BWP用于RRC建立之前的初始访问，记为BWP0，在小区初始接入阶段当搜索到SIB1消息后，SIB1消息中携带了Initial DL&#x2F;UL BWP的相关信息。</p><p>在还没有读到SIB1的时候，Initial DL BWP跟Coreset0是一样的频域范围，读到SIB1以后，用SIB1中的配置作为Initial DL&#x2F;UL BWP，并且用新的配置进行随机接入和RRC连接。<strong>SIB1中应当携带Initial DL BWP的信息，应当包含完整的Coreset0。</strong></p><h2 id="First-Active-BWP"><a href="#First-Active-BWP" class="headerlink" title="First Active BWP"></a>First Active BWP</h2><p>可以给SpCell或者SCell配置,在MCG中SpCell等同于PCell,在SCG中,SpCell等同于PSCell。SCell在小区组的SpCell之上提供额外的无线资源。是SpCell进行RRC配置或重配时激活的UL&#x2F;DL BWP</p><h2 id="Default-BWP"><a href="#Default-BWP" class="headerlink" title="Default BWP"></a>Default BWP</h2><p>网络会给UE配置一个BWP计时器统计UE是否超过一定时间在active BWP上没有接收也没发送数据，就从active BWP切换到default BWP进行节能。如果未配置，就用Initial DL BWP作为default BWP，对于TDD，切换DL active BWP和UL active BWP时同时的。而FDD是可以单独互相切换的。</p><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240917223853.png" alt="20240917223853"></p><h1 id="BWP配置"><a href="#BWP配置" class="headerlink" title="BWP配置"></a>BWP配置</h1><p>非BWP0配置分为common parameters和dedicated parameters,common是cell specific也就是小区通用的，对于不同的UE来说，这个参数必须通用。</p><p>common parameters DL BWP包含小区特定的BWP参数(<strong>频域位置,带宽,SCS，循环前缀CP</strong>)以及DL BWP对于PDCCH和PDSCH的额外小区参数。UL BWP包含小区参数以及针对随机接入，PUCCH，PUSCH的参数。</p><p>dedicated parameters DL BWP包含PDCCH,PDSCH以及semi-persistant 半持久调度以及链路监测配置。UL BWP包含PUSCH,PUCCH,SRS等。</p><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240917230932.png" alt="20240917230932"></p><p>如上图所示，BWP0有两种配置方式：</p><p>Option1：只用cell-specific prarameters配置</p><p>Option2：UE-specific和cell-specific同时使用</p><p>Option1因为只有cell-specific参数，因此功能受限，只能用做临时作用，实际上还应该配置一个二者参数都有的BWP。因为没有UE参数，因此协议规定最多配置4个BWP，不算这个BWP0。</p><p>Ootion2的BWP0就二者参数都有，因此不需要配置多个BWP，只需要BWP0就可以跟UE建立完全的连接。这个算在协议的4个BWP里面，因此还可以最多建立3个BWP。</p>]]></content>
    
    
    <categories>
      
      <category>5G</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>初始接入</title>
    <link href="/2024/09/13/%E5%88%9D%E5%A7%8B%E6%8E%A5%E5%85%A5/"/>
    <url>/2024/09/13/%E5%88%9D%E5%A7%8B%E6%8E%A5%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="SSB"><a href="#SSB" class="headerlink" title="SSB"></a>SSB</h1><p>SSB主要用来做初始接入，下图展示了SSB的频域位置</p><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240913231002.png#pic_center" alt="20240913231002"></p><p>SSB有以下几种pattern</p><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240913231523.png" alt="20240913231523"></p><p>SSB由4种信号组成，PSS&#x2F;SSS&#x2F;DMRS&#x2F;PBCH</p><h2 id="PSS主同步信号："><a href="#PSS主同步信号：" class="headerlink" title="PSS主同步信号："></a>PSS主同步信号：</h2><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240913231632.png" alt="20240913231632"></p><h2 id="SSS辅同步信号："><a href="#SSS辅同步信号：" class="headerlink" title="SSS辅同步信号："></a>SSS辅同步信号：</h2><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240913231745.png" alt="20240913231745"></p><p>得到了这两个信号就可以得到物理小区PCI：</p><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240913231821.png" alt="20240913231821"></p><p>小区初始接入搜索实际上是按照GSCN进行遍历搜索，寻找PSS和SSS。得到了这两个信号就可以开始解调PBCH，解调PBCH需要先得到参考信号PBCH–DMRS</p><p>DMRS在时频域频域上的位置：</p><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240913231924.png" alt="20240913231924"></p><p>解调了PBCH的DMRS以后就可以解调PBCH中的payload，也就是MIB信息：</p><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240916210526.png" alt="20240916210526"></p><p>同时 <code>subCarrierSpaceingCommon</code>在FR1中可以表示CRB的SCS：15&#x2F;30k，而SSB到CRB偏移的kssb计算值参照以15k为单位，在FR2中，偏移SCS单位和CRB的SCS相同都为60&#x2F;120k<br>可以看到kssb用了5个bit来表示，但是实际上kssb取值范围是0-23，因此还多出来了几个值，这几个值是用来加快SSB搜索的。有一些SSB是用来接入小区的，叫做Cell Defined SSB（CD-SSB），还有一些SSB是用于测量，称为Not Cell Defined SSB（NCD-SSB），当初始接入时搜索到NCD-SSB，实际上是在拖累接入速度，因此用kssb&#x3D;[24,31]来表示这些是异常SSB，不是用来初始接入的，并且根据异常kssb的值，可以更快找到下一个SSB所在位置 ：<br>结合下表，根据kssb和pdcch-ConfigSIB1的找到GSCN_Offset再加上当前的GSCN号，就是下一个搜索的GSCN号，这样加快了初始接入的速度。而FR1的kssb&#x3D;30跟FR2的kssb&#x3D;14就是说这个GSCN附近都没有SSB可以搜索，具体范围是[GSCN-GSCN_OffsetStart,GSCN+GSCN_OffsetEnd]，OffsetStart是pdcch-ConfigSIB1的高4位，OffsetEnd是低四位</p><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240916210821.png" alt="20240916210821"></p><h1 id="Coreset0"><a href="#Coreset0" class="headerlink" title="Coreset0"></a>Coreset0</h1><p>仅仅接收到MIB信息还不足以完成初始接入，还需要一些其它的系统信息——RMSI，这些信息会在PDSCH上发送，而PDSCH消息的发送需要DCI信息来指示，DCI信息在PDCCH上发送，因此需要在PDCCH上进行盲检获得DCI信息，从而完成RMSI信息的接收。这个过程需要Coreset0（Common Search Space）：</p><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240916210904.png" alt="20240916210904"></p><p>Coreset0是通过SSB获得的，这些信息就放在pdcch-ConfigSIB1中：</p><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240916210937.png" alt="20240916210937"></p><p>高4位指明了Coreset0的频域资源，低4位指明了时域资源找的过程如下：</p><ol><li>根据kssb得到SSB所在RB的起始位置（SSB是RE对齐）</li><li>根据pdcch-ConfigSIB1中的高4位进行查表，如上图所示，其中PDCCH的SCS由MIB的subCarrierSpacingCommon指示，而SSB的SCS则是协议已经规定了哪个频段可以用的SSB的Case和SCS</li><li>查看和SSB的SCS以及PDCCH的SCS对应的表，根据高四位组成的index来获得Coreset0信息，下图表明pdcch-ConfigSIB1的值为0，得到了Coreset0的RB数，Symbol数以及相对SSB的偏移，因此也就确定了频域位置。</li></ol><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240916211004.png" alt="20240916211004"></p><ol start="4"><li>根据低四位获得时域监听位置（还是以上图为例）</li></ol><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240916211014.png" alt="20240916211014"></p><p> 实际上Coreset在时域上的位置是有Coreset的参数来确定的，这个参数是在RRC建立后下发：<br>    SearchSpace -&gt; monitoringSymbolsWithinSlot : 监听coreset的起始符号<br>    ControlResourceSet -&gt; duration : coreset的符号数</p><p>对于Coreset0而言，还没有完成初始接入，第一个参数实际上就是表中的First Symbol Index和 N_”symb” ^”CORESET”<br>5. 得到了时域位置，拿到了O和M两个参数：</p><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240916211211.png" alt="20240916211211"></p><p>O的意思是相对于偶数帧起始位置的偏移(ms)，1ms包含2^μ 个slot，实际上指示了第一个SSB的位置：</p><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240916211227.png" alt="20240916211227"></p><p>M就可以理解为一个SSB对应多少个slot偏移，结合表中一个slot有几个搜索空间来看记为N,N&#x3D;1,coreset用1个符号，First Symbol Index&#x3D;0：</p><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240916211245.png" alt="20240916211245"></p><p>N&#x3D;2，M&#x3D;1&#x2F;2，coreset用1个符号，SSB index偶数First Symbol为0，SSB index为奇数，First Symbol为Coreset SymbolNum：两个SSB共用同一个时隙就叫M&#x3D;1&#x2F;2，下图中同一个时隙内的蓝色和粉色部分，就是相邻的两个SSB的coreset起始符号，因此每过两个SSB index，监听的起始slot+1</p><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240916211253.png" alt="20240916211253"></p><h1 id="RMSI"><a href="#RMSI" class="headerlink" title="RMSI"></a>RMSI</h1><h2 id="频域"><a href="#频域" class="headerlink" title="频域"></a>频域</h2><p>有了coreset0和searchspace0的视频资源以后就可以利用RNTI搜索RMSI——SIB1。根据DCI format 1_0指示在PDSCH接收RMSI。其中RNTI是DCI的加扰方式，可以理解为DCI的一种标识号。这里的RNTI是SI-RNTI，value为0xFFFF。其中coreset0的调度方式是CCE，Type 0 CSS按照协议规定有几个聚合等级：</p><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240922164909.png" alt="20240922164909"></p><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240922165528.png" alt="20240922165528"></p><p>DCI format 1_0结构如下：</p><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240922192902.png" alt="20240922192902"></p><p>其中DCI format 1_0只能用type 1调度（Type 0是RBG粒度，Type 1是RB粒度）：</p><p><code>Two downlink resource allocation schemes, type 0 and type 1, are supported. The UE shall assume that when the  scheduling grant is received with DCI format 1_0, 4_0 or 4_1 then downlink resource allocation type 1 is used.</code></p><p>Type 0的RBG大小由协议：</p><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240922195726.png" alt="20240922195726"></p><p>例如BWP size&#x3D;24RB，configuration&#x3D;1，RBG size&#x3D;2，那么BWP内有12个RBG，分配资源的位图bit就有12位。</p><p>Type 1用起始位置RB(S)和RB数(L)来描述(下标从0开始)，通过RIV的形式告知UE：</p><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240922202314.png" alt="20240922202314"></p><p>如下图所示，假设N&#x3D;7，如果只用第一个公式算，每一对(L,S)虽然有唯一对应的值，但是最大值42要6bit表示，而采用else后面的公式，则是把0-27都填满，只需要5个bit，节省了一个bit。<br><strong>SIB1中本来就会携带Initial BWP信息，此处用的BWP是用coreset0的RB数作为N，带入推算S，L</strong></p><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240922202958.png" alt="20240922202958"></p><h2 id="时域"><a href="#时域" class="headerlink" title="时域"></a>时域</h2><p>PDSCH支持符号级别调度，gNodeB会给UE发送一张表，然后后续发送index，直接在表里面查找index就行了，但是初始接入阶段，gNodeB甚至还不知道UE的存在，因此存在了几张默认的表给UE使用，根据coreset0的服用pattern来选择。</p><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240922205100.png" alt="20240922205100"></p><p>假设是patternA则查表：</p><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240922205235.png" alt="20240922205235"></p><p>Row index就是Time Domain resource assignment字段的4bit(0-15对应表格的1-16),K0表示PDSCH相对PDCCH的偏移，K0&#x3D;0表示同一时隙，K0&#x3D;1表示PDSCH在PDCCH的下一个时隙，S表示起始符号，L表示符号数量，参考RIV，时域用SLIV表示：</p><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240922210049.png" alt="20240922210049"></p><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240922210200.png" alt="20240922210200"></p><p>至于dmrs和mapping type在PDSCH中再进行说明。</p>]]></content>
    
    
    <categories>
      
      <category>5G</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
