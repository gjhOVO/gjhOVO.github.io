<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>初始接入</title>
    <link href="/2024/09/13/%E5%88%9D%E5%A7%8B%E6%8E%A5%E5%85%A5/"/>
    <url>/2024/09/13/%E5%88%9D%E5%A7%8B%E6%8E%A5%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="SSB"><a href="#SSB" class="headerlink" title="SSB"></a>SSB</h1><p>SSB主要用来做初始接入，下图展示了SSB的频域位置</p><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240913231002.png#pic_center" alt="20240913231002"></p><p>SSB有以下几种pattern</p><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240913231523.png" alt="20240913231523"></p><p>SSB由4种信号组成，PSS&#x2F;SSS&#x2F;DMRS&#x2F;PBCH</p><h2 id="PSS主同步信号："><a href="#PSS主同步信号：" class="headerlink" title="PSS主同步信号："></a>PSS主同步信号：</h2><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240913231632.png" alt="20240913231632"></p><h2 id="SSS辅同步信号："><a href="#SSS辅同步信号：" class="headerlink" title="SSS辅同步信号："></a>SSS辅同步信号：</h2><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240913231745.png" alt="20240913231745"></p><p>得到了这两个信号就可以得到物理小区PCI：</p><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240913231821.png" alt="20240913231821"></p><p>小区初始接入搜索实际上是按照GSCN进行遍历搜索，寻找PSS和SSS。得到了这两个信号就可以开始解调PBCH，解调PBCH需要先得到参考信号PBCH–DMRS</p><p>DMRS在时频域频域上的位置：</p><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240913231924.png" alt="20240913231924"></p><p>解调了PBCH的DMRS以后就可以解调PBCH中的payload，也就是MIB信息：</p><p><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240916210526.png" alt="20240916210526"></p><p>同时 <code>subCarrierSpaceingCommon</code>在FR1中可以表示CRB的SCS：15&#x2F;30k，而SSB到CRB偏移的kssb计算值参照以15k为单位，在FR2中，偏移SCS单位和CRB的SCS相同都为60&#x2F;120k<br>可以看到kssb用了5个bit来表示，但是实际上kssb取值范围是0-23，因此还多出来了几个值，这几个值是用来加快SSB搜索的。有一些SSB是用来接入小区的，叫做Cell Defined SSB（CD-SSB），还有一些SSB是用于测量，称为Not Cell Defined SSB（NCD-SSB），当初始接入时搜索到NCD-SSB，实际上是在拖累接入速度，因此用kssb&#x3D;[24,31]来表示这些是异常SSB，不是用来初始接入的，并且根据异常kssb的值，可以更快找到下一个SSB所在位置 ：<br>结合下表，根据kssb和pdcch-ConfigSIB1的找到GSCN_Offset再加上当前的GSCN号，就是下一个搜索的GSCN号，这样加快了初始接入的速度。而FR1的kssb&#x3D;30跟FR2的kssb&#x3D;14就是说这个GSCN附近都没有SSB可以搜索，具体范围是[GSCN-GSCN_OffsetStart,GSCN+GSCN_OffsetEnd]，OffsetStart是pdcch-ConfigSIB1的高4位，OffsetEnd是低四位<br><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240916210821.png" alt="20240916210821"></p><h1 id="Coreset0"><a href="#Coreset0" class="headerlink" title="Coreset0"></a>Coreset0</h1><p>仅仅接收到MIB信息还不足以完成初始接入，还需要一些其它的系统信息——RMSI，这些信息会在PDSCH上发送，而PDSCH消息的发送需要DCI信息来指示，DCI信息在PDCCH上发送，因此需要在PDCCH上进行盲检获得DCI信息，从而完成RMSI信息的接收。这个过程需要Coreset0（Common Search Space）：<br><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240916210904.png" alt="20240916210904"></p><p>Coreset0是通过SSB获得的，这些信息就放在pdcch-ConfigSIB1中：<br><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240916210937.png" alt="20240916210937"></p><p>高4位指明了Coreset0的频域资源，低4位指明了时域资源找的过程如下：</p><ol><li>根据kssb得到SSB所在RB的起始位置（SSB是RE对齐）</li><li>根据pdcch-ConfigSIB1中的高4位进行查表，如上图所示，其中PDCCH的SCS由MIB的subCarrierSpacingCommon指示，而SSB的SCS则是协议已经规定了哪个频段可以用的SSB的Case和SCS</li><li>查看和SSB的SCS以及PDCCH的SCS对应的表，根据高四位组成的index来获得Coreset0信息，下图表明pdcch-ConfigSIB1的值为0，得到了Coreset0的RB数，Symbol数以及相对SSB的偏移，因此也就确定了频域位置。<br><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240916211004.png" alt="20240916211004"></li><li>根据低四位获得时域监听位置（还是以上图为例）<br><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240916211014.png" alt="20240916211014"></li></ol><p> 实际上Coreset在时域上的位置是有Coreset的参数来确定的，这个参数是在RRC建立后下发：<br>    SearchSpace -&gt; monitoringSymbolsWithinSlot : 监听coreset的起始符号<br>    ControlResourceSet -&gt; duration : coreset的符号数</p><pre><code class="hljs">对于Coreset0而言，还没有完成初始接入，第一个参数实际上就是表中的First Symbol Index和 N_&quot;symb&quot; ^&quot;CORESET&quot;</code></pre><ol start="5"><li>得到了时域位置，拿到了O和M两个参数：<br><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240916211211.png" alt="20240916211211"></li></ol><p>O的意思是相对于偶数帧起始位置的偏移(ms)，1ms包含2^μ 个slot，实际上指示了第一个SSB的位置：<br><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240916211227.png" alt="20240916211227"><br>    M就可以理解为一个SSB对应多少个slot偏移，结合表中一个slot有几个搜索空间来看记为N<br>    N&#x3D;1,coreset用1个符号，First Symbol Index&#x3D;0：<br><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240916211245.png" alt="20240916211245"><br>    N&#x3D;2，M&#x3D;1&#x2F;2，coreset用1个符号，SSB index偶数First Symbol为0，SSB index为奇数，First Symbol为Coreset SymbolNum：<br>    两个SSB共用同一个时隙就叫M&#x3D;1&#x2F;2，下图中同一个时隙内的蓝色和粉色部分，就是相邻的两个SSB的coreset起始符号，因此每过两个SSB index，监听的起始slot+1<br><img src="https://raw.githubusercontent.com/gjhOVO/PicGo/main/PicGo/images20240916211253.png" alt="20240916211253"></p>]]></content>
    
    
    <categories>
      
      <category>5G</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/09/10/hello-world/"/>
    <url>/2024/09/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
